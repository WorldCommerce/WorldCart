//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorldCart.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CheckoutEntities : DbContext
    {
        public CheckoutEntities()
            : base("name=CheckoutEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
    
        public virtual ObjectResult<Nullable<long>> AddOrder(Nullable<decimal> total, Nullable<System.DateTime> orderDate, string orderNumber, Nullable<long> customerID, Nullable<long> addressID, string username, string title, string summary, string networkAddress, Nullable<System.DateTime> createdDate, string createdByUser, Nullable<int> portalID)
        {
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var orderNumberParameter = orderNumber != null ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(long));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(long));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var summaryParameter = summary != null ?
                new ObjectParameter("Summary", summary) :
                new ObjectParameter("Summary", typeof(string));
    
            var networkAddressParameter = networkAddress != null ?
                new ObjectParameter("NetworkAddress", networkAddress) :
                new ObjectParameter("NetworkAddress", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdByUserParameter = createdByUser != null ?
                new ObjectParameter("CreatedByUser", createdByUser) :
                new ObjectParameter("CreatedByUser", typeof(string));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("AddOrder", totalParameter, orderDateParameter, orderNumberParameter, customerIDParameter, addressIDParameter, usernameParameter, titleParameter, summaryParameter, networkAddressParameter, createdDateParameter, createdByUserParameter, portalIDParameter);
        }
    
        public virtual int GetOrder(string orderNumber, Nullable<int> portalID)
        {
            var orderNumberParameter = orderNumber != null ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(string));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetOrder", orderNumberParameter, portalIDParameter);
        }
    
        public virtual int ListOrders(Nullable<int> maximumRows, Nullable<long> startRowIndex, string username, string sortExpression, Nullable<int> portalID)
        {
            var maximumRowsParameter = maximumRows.HasValue ?
                new ObjectParameter("MaximumRows", maximumRows) :
                new ObjectParameter("MaximumRows", typeof(int));
    
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("StartRowIndex", startRowIndex) :
                new ObjectParameter("StartRowIndex", typeof(long));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var sortExpressionParameter = sortExpression != null ?
                new ObjectParameter("SortExpression", sortExpression) :
                new ObjectParameter("SortExpression", typeof(string));
    
            var portalIDParameter = portalID.HasValue ?
                new ObjectParameter("PortalID", portalID) :
                new ObjectParameter("PortalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ListOrders", maximumRowsParameter, startRowIndexParameter, usernameParameter, sortExpressionParameter, portalIDParameter);
        }
    
        public virtual int UpdateOrder(Nullable<long> iD, Nullable<decimal> total, Nullable<decimal> subtotal, Nullable<decimal> taxTotal, Nullable<decimal> feeTotal, Nullable<decimal> shippingTotal, Nullable<decimal> discountTotal, Nullable<short> status, Nullable<System.DateTime> modifiedDate, string modifiedByUser)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var subtotalParameter = subtotal.HasValue ?
                new ObjectParameter("Subtotal", subtotal) :
                new ObjectParameter("Subtotal", typeof(decimal));
    
            var taxTotalParameter = taxTotal.HasValue ?
                new ObjectParameter("TaxTotal", taxTotal) :
                new ObjectParameter("TaxTotal", typeof(decimal));
    
            var feeTotalParameter = feeTotal.HasValue ?
                new ObjectParameter("FeeTotal", feeTotal) :
                new ObjectParameter("FeeTotal", typeof(decimal));
    
            var shippingTotalParameter = shippingTotal.HasValue ?
                new ObjectParameter("ShippingTotal", shippingTotal) :
                new ObjectParameter("ShippingTotal", typeof(decimal));
    
            var discountTotalParameter = discountTotal.HasValue ?
                new ObjectParameter("DiscountTotal", discountTotal) :
                new ObjectParameter("DiscountTotal", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(short));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var modifiedByUserParameter = modifiedByUser != null ?
                new ObjectParameter("ModifiedByUser", modifiedByUser) :
                new ObjectParameter("ModifiedByUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOrder", iDParameter, totalParameter, subtotalParameter, taxTotalParameter, feeTotalParameter, shippingTotalParameter, discountTotalParameter, statusParameter, modifiedDateParameter, modifiedByUserParameter);
        }
    }
}
